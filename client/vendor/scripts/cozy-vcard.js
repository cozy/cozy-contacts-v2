// Generated by CoffeeScript 1.8.0
(function() {
  var ANDROID_RELATION_TYPES, VCardParser, quotedPrintable, regexps, utf8,
    __slice = [].slice;

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    utf8 = require('utf8');
    quotedPrintable = require('quoted-printable');
  } else {
    utf8 = window.utf8;
    quotedPrintable = window.quotedPrintable;
  }

  regexps = {
    begin: /^BEGIN:VCARD$/i,
    end: /^END:VCARD$/i,
    beginNonVCard: /^BEGIN:(.*)$/i,
    endNonVCard: /^END:(.*)$/i,
    simple: /^(version|fn|n|title|org|note|categories)(;CHARSET=UTF-8)?(;ENCODING=QUOTED-PRINTABLE)?\:(.+)$/i,
    android: /^x-android-custom\:(.+)$/i,
    composedkey: /^item(\d{1,2})\.([^\:]+):(.+)$/,
    complex: /^([^\:\;]+);([^\:]+)\:(.+)$/,
    property: /^(.+)=(.+)$/
  };

  ANDROID_RELATION_TYPES = ['custom', 'assistant', 'brother', 'child', 'domestic partner', 'father', 'friend', 'manager', 'mother', 'parent', 'partner', 'referred by', 'relative', 'sister', 'spouse'];

  VCardParser = (function() {
    function VCardParser(vcf) {
      this.reset();
      if (vcf) {
        this.read(vcf);
      }
    }

    VCardParser.prototype.reset = function() {
      this.contacts = [];
      this.currentContact = null;
      this.currentDatapoint = null;
      this.currentIndex = null;
      return this.currentVersion = "3.0";
    };

    VCardParser.prototype.read = function(vcf) {
      var line, _i, _len, _ref, _results;
      _ref = this.splitLines(vcf);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push(this.handleLine(line));
      }
      return _results;
    };

    VCardParser.prototype.splitLines = function(s) {
      var inQuotedPrintable, lines, sourcelines;
      sourcelines = s.split(/\r?\n/);
      lines = [];
      inQuotedPrintable = false;
      sourcelines.forEach(function(line) {
        var lineIndex;
        if ((line == null) || line === '') {
          return;
        }
        if (line[0] === ' ' || inQuotedPrintable) {
          if (line[0] === ' ') {
            line = line.slice(1);
          }
          if (inQuotedPrintable) {
            if (line[line.length - 1] === '=') {
              line = line.slice(0, -1);
            } else {
              inQuotedPrintable = false;
            }
          }
          lineIndex = lines.length - 1;
          if (lineIndex >= 0) {
            return lines[lineIndex] = lines[lineIndex] + line;
          } else {
            return lines.push(line);
          }
        } else {
          if (/^(.+)ENCODING=QUOTED-PRINTABLE(.+)=$/i.test(line)) {
            inQuotedPrintable = true;
            line = line.slice(0, -1);
          }
          return lines.push(line);
        }
      });
      return lines;
    };

    VCardParser.prototype.handleLine = function(line) {
      if (this.nonVCard) {
        if (regexps.endNonVCard.test(line)) {
          if (line.match(regexps.endNonVCard)[1] === this.nonVCard) {
            return this.nonVCard = false;
          }
        }
      } else if (regexps.begin.test(line)) {
        return this.currentContact = {
          datapoints: []
        };
      } else if (regexps.beginNonVCard.test(line)) {
        return this.nonVCard = line.match(regexps.beginNonVCard)[1];
      } else if (regexps.end.test(line)) {
        this.storeCurrentDatapoint();
        return this.storeCurrentContact();
      } else if (regexps.simple.test(line)) {
        return this.handleSimpleLine(line);
      } else if (regexps.android.test(line)) {
        return this.handleAndroidLine(line);
      } else if (regexps.composedkey.test(line)) {
        return this.handleComposedLine(line);
      } else if (regexps.complex.test(line)) {
        return this.handleComplexLine(line);
      }
    };

    VCardParser.prototype.storeCurrentDatapoint = function() {
      if (this.currentDatapoint) {
        this.currentContact.datapoints.push(this.currentDatapoint);
        return this.currentDatapoint = null;
      }
    };

    VCardParser.prototype.addDatapoint = function(name, type, value) {
      this.storeCurrentDatapoint();
      return this.currentContact.datapoints.push({
        name: name,
        type: type,
        value: value
      });
    };

    VCardParser.prototype.storeCurrentContact = function() {
      var _ref;
      if ((this.currentContact.n == null) && (this.currentContact.fn == null)) {
        console.error('There should be at least a N field or a FN field');
      }
      if ((this.currentContact.n == null) || ((_ref = this.currentContact.n) === '' || _ref === ';;;;')) {
        this.currentContact.n = VCardParser.fnToN(this.currentContact.fn).join(';');
      }
      if ((this.currentContact.fn == null) || this.currentContact.fn === '') {
        this.currentContact.fn = VCardParser.nToFN(this.currentContact.n);
      }
      return this.contacts.push(this.currentContact);
    };

    VCardParser.prototype.handleSimpleLine = function(line) {
      var all, key, nParts, nPartsCleaned, quoted, utf, value, _ref;
      _ref = line.match(regexps.simple), all = _ref[0], key = _ref[1], utf = _ref[2], quoted = _ref[3], value = _ref[4];
      if (quoted != null) {
        value = VCardParser.unquotePrintable(value);
      }
      value = VCardParser.unescapeText(value);
      key = key.toLowerCase();
      if (key === 'version') {
        return this.currentversion = value;
      } else if (key === 'categories') {
        return this.currentContact.tags = value.split(/(?!\\),/).map(VCardParser.unescapeText);
      } else if (key === 'n') {
        nParts = value.split(/(?!\\);/);
        if (nParts.length === 5) {
          return this.currentContact['n'] = value;
        } else {
          nPartsCleaned = ['', '', '', '', ''];
          if (nParts.length < 5) {
            nParts.forEach(function(part, index) {
              return nPartsCleaned[index] = part;
            });
          } else {
            nParstCleaned[2] = nParts.join(' ');
          }
          return this.currentContact['n'] = nPartsCleaned.join(';');
        }
      } else if (key === 'title' || key === 'org' || key === 'fn' || key === 'note' || key === 'bday') {
        return this.currentContact[key.toLowerCase()] = value;
      }
    };

    VCardParser.prototype.handleAndroidLine = function(line) {
      var all, parts, raw, type, value, _ref, _ref1;
      _ref = line.match(regexps.android), all = _ref[0], raw = _ref[1];
      parts = raw.split(';');
      switch (parts[0].replace('vnd.android.cursor.item/', '')) {
        case 'contact_event':
          value = parts[1];
          type = (_ref1 = parts[2]) === '0' || _ref1 === '2' ? parts[3] : parts[2] === '1' ? 'anniversary' : 'birthday';
          return this.currentContact.datapoints.push({
            name: 'about',
            type: type,
            value: value
          });
        case 'relation':
          value = parts[1];
          type = ANDROID_RELATION_TYPES[+parts[2]];
          if (type === 'custom') {
            type = parts[3];
          }
          return this.currentContact.datapoints.push({
            name: 'other',
            type: type,
            value: value
          });
      }
    };

    VCardParser.prototype.handleComposedLine = function(line) {
      var all, itemidx, key, part, properties, value, _ref;
      _ref = line.match(regexps.composedkey), all = _ref[0], itemidx = _ref[1], part = _ref[2], value = _ref[3];
      if (this.currentIndex === null || this.currentIndex !== itemidx) {
        this.storeCurrentDatapoint();
        this.currentDatapoint = {};
      }
      this.currentIndex = itemidx;
      part = part.split(';');
      key = part[0];
      properties = part.splice(1);
      value = value.split(';');
      if (value.length === 1) {
        value = value[0].replace('_$!<', '').replace('>!$_', '').replace('\\:', ':');
      }
      key = key.toLowerCase();
      if (key === 'x-ablabel' || key === 'x-abadr') {
        return this.addTypeProperty(this.currentDatapoint, value.toLowerCase());
      } else {
        this.handleProperties(this.currentDatapoint, properties);
        if (key === 'x-abdate') {
          key = 'about';
        }
        if (key === 'x-abrelatednames') {
          key = 'other';
        }
        if (key === 'adr') {
          if (Array.isArray(value)) {
            value = value.map(VCardParser.unescapeText);
          } else {
            value = ['', '', VCardParser.unescapeText(value), '', '', '', ''];
          }
        }
        this.currentDatapoint['name'] = key.toLowerCase();
        return this.currentDatapoint['value'] = value;
      }
    };

    VCardParser.prototype.handleComplexLine = function(line) {
      var all, key, properties, value, _ref;
      _ref = line.match(regexps.complex), all = _ref[0], key = _ref[1], properties = _ref[2], value = _ref[3];
      this.storeCurrentDatapoint();
      this.currentDatapoint = {};
      value = value.split(';');
      if (value.length === 1) {
        value = value[0];
      }
      key = key.toLowerCase();
      if (key === 'email' || key === 'tel' || key === 'adr' || key === 'url') {
        this.currentDatapoint['name'] = key;
        if (key === 'adr') {
          if (Array.isArray(value)) {
            value = value.map(VCardParser.unescapeText);
          } else {
            value = ['', '', VCardParser.unescapeText(value), '', '', '', ''];
          }
        }
      } else if (key === 'bday') {
        this.currentContact['bday'] = value;
        this.currentDatapoint = null;
        return;
      } else if (key === 'photo') {
        this.currentContact['photo'] = value;
        this.currentDatapoint = null;
        return;
      } else {
        this.currentDatapoint = null;
        return;
      }
      this.handleProperties(this.currentDatapoint, properties.split(';'));
      if (this.currentDatapoint.encoding === 'quoted-printable') {
        if (Array.isArray(value)) {
          value = value.map(VCardParser.unquotePrintable);
        } else {
          value = VCardParser.unquotePrintable(value);
        }
        delete this.currentDatapoint.encoding;
      }
      return this.currentDatapoint.value = value;
    };

    VCardParser.prototype.handleProperties = function(dp, properties) {
      var all, match, pname, property, pvalue, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        property = properties[_i];
        if (match = property.match(regexps.property)) {
          all = match[0], pname = match[1], pvalue = match[2];
          pvalue = pvalue.toLowerCase();
        } else if (property === 'PREF') {
          pname = 'pref';
          pvalue = true;
        } else {
          pname = 'type';
          pvalue = property.toLowerCase();
        }
        if (pname === 'type' && pvalue === 'pref') {
          pname = 'pref';
          pvalue = true;
        }
        if (pname === 'type') {
          _results.push(this.addTypeProperty(dp, pvalue));
        } else {
          _results.push(dp[pname.toLowerCase()] = pvalue);
        }
      }
      return _results;
    };

    VCardParser.prototype.addTypeProperty = function(dp, pvalue) {
      var oldTypeValue;
      if ('type' in dp) {
        dp.typesOther = dp.typesOther || [];
        if (pvalue === 'home' || pvalue === 'work' || pvalue === 'cell') {
          oldTypeValue = dp.type;
          dp.type = pvalue;
          return dp.typesOther.push(oldTypeValue);
        } else {
          return dp.typesOther.push(pvalue);
        }
      } else {
        return dp['type'] = pvalue;
      }
    };

    return VCardParser;

  })();

  VCardParser.unquotePrintable = function(s) {
    var error;
    s = s || '';
    try {
      return utf8.decode(quotedPrintable.decode(s));
    } catch (_error) {
      error = _error;
      return s;
    }
  };

  VCardParser.escapeText = function(s) {
    var t;
    if (s == null) {
      return s;
    }
    t = s.replace(/([,;\\])/ig, "\\$1");
    t = t.replace(/\n/g, '\\n');
    return t;
  };

  VCardParser.unescapeText = function(t) {
    var s;
    if (t == null) {
      return t;
    }
    s = t.replace(/\\n/ig, '\n');
    s = s.replace(/\\([,;\\])/ig, "$1");
    return s;
  };

  VCardParser.toVCF = function(model, picture) {
    var dp, folded, formattedType, i, key, out, pictureString, prop, type, uid, uri, value, _i, _len, _ref, _ref1, _ref2;
    if (picture == null) {
      picture = null;
    }
    out = ["BEGIN:VCARD"];
    out.push("VERSION:3.0");
    uri = model.carddavuri;
    uid = (uri != null ? uri.substring(0, uri.length - 4) : void 0) || model.id;
    out.push("UID:" + uid);
    _ref = ['fn', 'bday', 'org', 'title', 'note'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      prop = _ref[_i];
      value = model[prop];
      if (value) {
        value = VCardParser.escapeText(value);
      }
      if (value) {
        out.push("" + (prop.toUpperCase()) + ":" + value);
      }
    }
    if (model.n != null) {
      out.push("N:" + model.n);
    }
    if ((model.tags != null) && model.tags.length > 0) {
      value = model.tags.map(VCardParser.escapeText).join(',');
      out.push("CATEGORIES:" + value);
    }
    _ref1 = model.datapoints;
    for (i in _ref1) {
      dp = _ref1[i];
      key = dp.name.toUpperCase();
      type = ((_ref2 = dp.type) != null ? _ref2.toUpperCase() : void 0) || null;
      value = dp.value;
      if (Array.isArray(value)) {
        value = value.map(VCardParser.escapeText);
      } else {
        value = VCardParser.escapeText(value);
      }
      if (type != null) {
        formattedType = ";TYPE=" + type;
      } else {
        formattedType = "";
      }
      switch (key) {
        case 'ABOUT':
          if (type === 'ORG' || type === 'TITLE' || type === 'BDAY') {
            out.push("" + formattedType + ":" + value);
          } else {
            out.push("X-" + formattedType + ":" + value);
          }
          break;
        case 'OTHER':
          out.push("X-" + formattedType + ":" + value);
          break;
        case 'ADR':
          out.push("" + key + formattedType + ":" + (value.join(';')));
          break;
        default:
          out.push("" + key + formattedType + ":" + value);
      }
    }
    if (picture != null) {
      folded = picture.match(/.{1,75}/g).join('\n ');
      pictureString = "PHOTO;ENCODING=B;TYPE=JPEG;VALUE=BINARY:\n " + folded;
      out.push(pictureString);
    }
    out.push("END:VCARD");
    return out.join("\n") + "\n";
  };

  VCardParser.nToFN = function(n) {
    var familly, given, middle, parts, prefix, suffix;
    n = n || [];
    familly = n[0], given = n[1], middle = n[2], prefix = n[3], suffix = n[4];
    parts = [prefix, given, middle, familly, suffix];
    parts = parts.filter(function(part) {
      return (part != null) && part !== '';
    });
    return parts.join(' ');
  };

  VCardParser.fnToN = function(fn) {
    fn = fn || '';
    return ['', fn, '', '', ''];
  };

  VCardParser.fnToNLastnameNFirstname = function(fn) {
    var familly, given, middle, parts, _i, _ref;
    fn = fn || '';
    _ref = fn.split(' '), given = _ref[0], middle = 3 <= _ref.length ? __slice.call(_ref, 1, _i = _ref.length - 1) : (_i = 1, []), familly = _ref[_i++];
    parts = [familly, given, middle.join(' '), '', ''];
    return parts;
  };

  VCardParser.adrArrayToString = function(value) {
    var countryPart, flat, streetPart, structuredToFlat;
    value = value || [];
    structuredToFlat = function(t) {
      t = t.filter(function(part) {
        return (part != null) && part !== '';
      });
      return t.join(', ');
    };
    streetPart = structuredToFlat(value.slice(0, 3));
    countryPart = structuredToFlat(value.slice(3, 7));
    flat = streetPart;
    if (countryPart !== '') {
      flat += '\n' + countryPart;
    }
    return flat;
  };

  VCardParser.adrStringToArray = function(s) {
    s = s || '';
    return ['', '', s, '', '', '', ''];
  };

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = VCardParser;
  } else {
    window.VCardParser = VCardParser;
  }

}).call(this);
